import {
  require_fast_deep_equal,
  require_isPlainObject,
  require_mapValues,
  require_pick,
  require_pickBy,
  require_slash,
  require_stable,
  require_synchronous_promise
} from "./chunk-Z4KEX7YI.js";
import {
  require_dist
} from "./chunk-KYZ4VGBN.js";
import {
  require_runtime
} from "./chunk-SYGE5UKW.js";
import {
  HooksContext,
  addons,
  applyHooks,
  useChannel,
  useEffect,
  useMemo,
  useState
} from "./chunk-SBM6IEAB.js";
import {
  SHARED_STATE_CHANGED,
  SHARED_STATE_SET
} from "./chunk-I5FJA7UU.js";
import {
  require_memoizerific
} from "./chunk-GAG27ZFF.js";
import {
  esm_default,
  require_browser
} from "./chunk-CW55F7I7.js";
import {
  logger,
  once,
  require_es_regexp_exec
} from "./chunk-OLVSTUBD.js";
import {
  require_es_array_iterator,
  require_es_string_iterator,
  require_window
} from "./chunk-KSWJJUVF.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/args.js
var import_es_array_iterator = __toESM(require_es_array_iterator());
var import_es_string_iterator = __toESM(require_es_string_iterator());
var import_es_regexp_exec = __toESM(require_es_regexp_exec());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_isPlainObject = __toESM(require_isPlainObject());
var _templateObject;
var _templateObject2;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var INCOMPATIBLE = Symbol("incompatible");
var map = function map2(arg, argType) {
  var type = argType.type;
  if (arg === void 0 || arg === null || !type)
    return arg;
  if (argType.mapping) {
    return arg;
  }
  switch (type.name) {
    case "string":
      return String(arg);
    case "enum":
      return arg;
    case "number":
      return Number(arg);
    case "boolean":
      return arg === "true";
    case "array":
      if (!type.value || !Array.isArray(arg))
        return INCOMPATIBLE;
      return arg.reduce(function(acc, item, index) {
        var mapped = map2(item, {
          type: type.value
        });
        if (mapped !== INCOMPATIBLE)
          acc[index] = mapped;
        return acc;
      }, new Array(arg.length));
    case "object":
      if (typeof arg === "string" || typeof arg === "number")
        return arg;
      if (!type.value || _typeof(arg) !== "object")
        return INCOMPATIBLE;
      return Object.entries(arg).reduce(function(acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], val = _ref2[1];
        var mapped = map2(val, {
          type: type.value[key]
        });
        return mapped === INCOMPATIBLE ? acc : Object.assign(acc, _defineProperty({}, key, mapped));
      }, {});
    default:
      return INCOMPATIBLE;
  }
};
var mapArgsToTypes = function mapArgsToTypes2(args, argTypes) {
  return Object.entries(args).reduce(function(acc, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), key = _ref4[0], value = _ref4[1];
    if (!argTypes[key])
      return acc;
    var mapped = map(value, argTypes[key]);
    return mapped === INCOMPATIBLE ? acc : Object.assign(acc, _defineProperty({}, key, mapped));
  }, {});
};
var combineArgs = function combineArgs2(value, update) {
  if (Array.isArray(value) && Array.isArray(update)) {
    return update.reduce(function(acc, upd, index) {
      acc[index] = combineArgs2(value[index], update[index]);
      return acc;
    }, _toConsumableArray(value)).filter(function(v) {
      return v !== void 0;
    });
  }
  if (!(0, import_isPlainObject.default)(value) || !(0, import_isPlainObject.default)(update))
    return update;
  return Object.keys(Object.assign({}, value, update)).reduce(function(acc, key) {
    if (key in update) {
      var combined = combineArgs2(value[key], update[key]);
      if (combined !== void 0)
        acc[key] = combined;
    } else {
      acc[key] = value[key];
    }
    return acc;
  }, {});
};
var validateOptions = function validateOptions2(args, argTypes) {
  return Object.entries(argTypes).reduce(function(acc, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 2), key = _ref6[0], options = _ref6[1].options;
    function allowArg() {
      if (key in args) {
        acc[key] = args[key];
      }
      return acc;
    }
    if (!options)
      return allowArg();
    if (!Array.isArray(options)) {
      once.error(esm_default(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        Invalid argType: '", ".options' should be an array.\n\n        More info: https://storybook.js.org/docs/react/api/argtypes\n      "])), key));
      return allowArg();
    }
    if (options.some(function(opt) {
      return opt && ["object", "function"].includes(_typeof(opt));
    })) {
      once.error(esm_default(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        Invalid argType: '", ".options' should only contain primitives. Use a 'mapping' for complex values.\n\n        More info: https://storybook.js.org/docs/react/writing-stories/args#mapping-to-complex-arg-values\n      "])), key));
      return allowArg();
    }
    var isArray = Array.isArray(args[key]);
    var invalidIndex = isArray && args[key].findIndex(function(val) {
      return !options.includes(val);
    });
    var isValidArray = isArray && invalidIndex === -1;
    if (args[key] === void 0 || options.includes(args[key]) || isValidArray) {
      return allowArg();
    }
    var field = isArray ? "".concat(key, "[").concat(invalidIndex, "]") : key;
    var supportedOptions = options.map(function(opt) {
      return typeof opt === "string" ? "'".concat(opt, "'") : String(opt);
    }).join(", ");
    once.warn("Received illegal value for '".concat(field, "'. Supported options: ").concat(supportedOptions));
    return acc;
  }, {});
};
var DEEPLY_EQUAL = Symbol("Deeply equal");
var deepDiff = function deepDiff2(value, update) {
  if (_typeof(value) !== _typeof(update))
    return update;
  if ((0, import_fast_deep_equal.default)(value, update))
    return DEEPLY_EQUAL;
  if (Array.isArray(value) && Array.isArray(update)) {
    var res = update.reduce(function(acc, upd, index) {
      var diff = deepDiff2(value[index], upd);
      if (diff !== DEEPLY_EQUAL)
        acc[index] = diff;
      return acc;
    }, new Array(update.length));
    if (update.length >= value.length)
      return res;
    return res.concat(new Array(value.length - update.length).fill(void 0));
  }
  if ((0, import_isPlainObject.default)(value) && (0, import_isPlainObject.default)(update)) {
    return Object.keys(Object.assign({}, value, update)).reduce(function(acc, key) {
      var diff = deepDiff2(value === null || value === void 0 ? void 0 : value[key], update === null || update === void 0 ? void 0 : update[key]);
      return diff === DEEPLY_EQUAL ? acc : Object.assign(acc, _defineProperty({}, key, diff));
    }, {});
  }
  return update;
};
var NO_TARGET_NAME = "";
function groupArgsByTarget(_ref7) {
  var args = _ref7.args, argTypes = _ref7.argTypes;
  var groupedArgs = {};
  Object.entries(args).forEach(function(_ref8) {
    var _ref9 = _slicedToArray(_ref8, 2), name = _ref9[0], value = _ref9[1];
    var _ref10 = argTypes[name] || {}, _ref10$target = _ref10.target, target = _ref10$target === void 0 ? NO_TARGET_NAME : _ref10$target;
    groupedArgs[target] = groupedArgs[target] || {};
    groupedArgs[target][name] = value;
  });
  return groupedArgs;
}
function noTargetArgs(context) {
  return groupArgsByTarget(context)[NO_TARGET_NAME];
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/getValuesFromArgTypes.js
var import_es_array_iterator2 = __toESM(require_es_array_iterator());
var import_es_string_iterator2 = __toESM(require_es_string_iterator());
var import_es_regexp_exec2 = __toESM(require_es_regexp_exec());
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
var getValuesFromArgTypes = function getValuesFromArgTypes2() {
  var argTypes = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return Object.entries(argTypes).reduce(function(acc, _ref) {
    var _ref2 = _slicedToArray2(_ref, 2), arg = _ref2[0], defaultValue = _ref2[1].defaultValue;
    if (typeof defaultValue !== "undefined") {
      acc[arg] = defaultValue;
    }
    return acc;
  }, {});
};

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/normalizeInputTypes.js
var import_mapValues = __toESM(require_mapValues());
var _excluded = ["type", "control"];
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var normalizeType = function normalizeType2(type) {
  return typeof type === "string" ? {
    name: type
  } : type;
};
var normalizeControl = function normalizeControl2(control) {
  return typeof control === "string" ? {
    type: control
  } : control;
};
var normalizeInputType = function normalizeInputType2(inputType, key) {
  var type = inputType.type, control = inputType.control, rest = _objectWithoutProperties(inputType, _excluded);
  var normalized = Object.assign({
    name: key
  }, rest);
  if (type)
    normalized.type = normalizeType(type);
  if (control) {
    normalized.control = normalizeControl(control);
  } else if (control === false) {
    normalized.control = {
      disable: true
    };
  }
  return normalized;
};
var normalizeInputTypes = function normalizeInputTypes2(inputTypes) {
  return (0, import_mapValues.default)(inputTypes, normalizeInputType);
};

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/normalizeStory.js
var import_es_array_iterator3 = __toESM(require_es_array_iterator());
var import_es_string_iterator3 = __toESM(require_es_string_iterator());
var import_es_regexp_exec3 = __toESM(require_es_regexp_exec());
var import_csf = __toESM(require_dist());
var import_util_deprecate = __toESM(require_browser());
var _templateObject3;
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray3(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray3(arr);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _taggedTemplateLiteral2(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var deprecatedStoryAnnotation = esm_default(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral2(["\nCSF .story annotations deprecated; annotate story functions directly:\n- StoryFn.story.name => StoryFn.storyName\n- StoryFn.story.(parameters|decorators) => StoryFn.(parameters|decorators)\nSee https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#hoisted-csf-annotations for details and codemod.\n"])));
var deprecatedStoryAnnotationWarning = (0, import_util_deprecate.default)(function() {
}, deprecatedStoryAnnotation);
function normalizeStory(key, storyAnnotations, meta) {
  var userStoryFn;
  var storyObject;
  if (typeof storyAnnotations === "function") {
    userStoryFn = storyAnnotations;
    storyObject = storyAnnotations;
  } else {
    storyObject = storyAnnotations;
  }
  var _storyObject = storyObject, story = _storyObject.story;
  if (story) {
    logger.debug("deprecated story", story);
    deprecatedStoryAnnotationWarning();
  }
  var exportName = (0, import_csf.storyNameFromExport)(key);
  var name = typeof storyObject !== "function" && storyObject.name || storyObject.storyName || (story === null || story === void 0 ? void 0 : story.name) || exportName;
  var decorators = [].concat(_toConsumableArray2(storyObject.decorators || []), _toConsumableArray2((story === null || story === void 0 ? void 0 : story.decorators) || []));
  var parameters = Object.assign({}, story === null || story === void 0 ? void 0 : story.parameters, storyObject.parameters);
  var args = Object.assign({}, story === null || story === void 0 ? void 0 : story.args, storyObject.args);
  var argTypes = Object.assign({}, story === null || story === void 0 ? void 0 : story.argTypes, storyObject.argTypes);
  var loaders = [].concat(_toConsumableArray2(storyObject.loaders || []), _toConsumableArray2((story === null || story === void 0 ? void 0 : story.loaders) || []));
  var _storyObject2 = storyObject, render = _storyObject2.render, play = _storyObject2.play;
  var id = parameters.__id || (0, import_csf.toId)(meta.id || meta.title, exportName);
  return Object.assign({
    id,
    name,
    decorators,
    parameters,
    args,
    argTypes: normalizeInputTypes(argTypes),
    loaders
  }, render && {
    render
  }, userStoryFn && {
    userStoryFn
  }, play && {
    play
  });
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/normalizeComponentAnnotations.js
var import_csf2 = __toESM(require_dist());
function normalizeComponentAnnotations(defaultExport) {
  var title = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultExport.title;
  var importPath = arguments.length > 2 ? arguments[2] : void 0;
  var id = defaultExport.id, argTypes = defaultExport.argTypes;
  return Object.assign({
    id: (0, import_csf2.sanitize)(id || title)
  }, defaultExport, {
    title
  }, argTypes && {
    argTypes: normalizeInputTypes(argTypes)
  }, {
    parameters: Object.assign({
      fileName: importPath
    }, defaultExport.parameters)
  });
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/processCSFFile.js
var import_csf3 = __toESM(require_dist());
var _excluded2 = ["default", "__namedExportsOrder"];
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var checkGlobals = function checkGlobals2(parameters) {
  var globals = parameters.globals, globalTypes = parameters.globalTypes;
  if (globals || globalTypes) {
    logger.error("Global args/argTypes can only be set globally", JSON.stringify({
      globals,
      globalTypes
    }));
  }
};
var checkStorySort = function checkStorySort2(parameters) {
  var options = parameters.options;
  if (options !== null && options !== void 0 && options.storySort)
    logger.error("The storySort option parameter can only be set globally");
};
var checkDisallowedParameters = function checkDisallowedParameters2(parameters) {
  if (!parameters) {
    return;
  }
  checkGlobals(parameters);
  checkStorySort(parameters);
};
function processCSFFile(moduleExports, importPath, title) {
  var defaultExport = moduleExports.default, __namedExportsOrder = moduleExports.__namedExportsOrder, namedExports = _objectWithoutProperties2(moduleExports, _excluded2);
  var meta = normalizeComponentAnnotations(defaultExport, title, importPath);
  checkDisallowedParameters(meta.parameters);
  var csfFile = {
    meta,
    stories: {}
  };
  Object.keys(namedExports).forEach(function(key) {
    if ((0, import_csf3.isExportStory)(key, meta)) {
      var storyMeta = normalizeStory(key, namedExports[key], meta);
      checkDisallowedParameters(storyMeta.parameters);
      csfFile.stories[storyMeta.id] = storyMeta;
    }
  });
  return csfFile;
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/parameters.js
var import_es_array_iterator4 = __toESM(require_es_array_iterator());
var import_es_string_iterator4 = __toESM(require_es_string_iterator());
var import_es_regexp_exec4 = __toESM(require_es_regexp_exec());
var import_isPlainObject2 = __toESM(require_isPlainObject());
function _toConsumableArray3(arr) {
  return _arrayWithoutHoles3(arr) || _iterableToArray3(arr) || _unsupportedIterableToArray4(arr) || _nonIterableSpread3();
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray3(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles3(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray4(arr);
}
function _slicedToArray3(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest3();
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit3(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
var combineParameters = function combineParameters2() {
  for (var _len = arguments.length, parameterSets = new Array(_len), _key = 0; _key < _len; _key++) {
    parameterSets[_key] = arguments[_key];
  }
  var mergeKeys = {};
  var combined = parameterSets.filter(Boolean).reduce(function(acc, p) {
    Object.entries(p).forEach(function(_ref) {
      var _ref2 = _slicedToArray3(_ref, 2), key = _ref2[0], value = _ref2[1];
      var existing = acc[key];
      if (Array.isArray(value) || typeof existing === "undefined") {
        acc[key] = value;
      } else if ((0, import_isPlainObject2.default)(value) && (0, import_isPlainObject2.default)(existing)) {
        mergeKeys[key] = true;
      } else if (typeof value !== "undefined") {
        acc[key] = value;
      }
    });
    return acc;
  }, {});
  Object.keys(mergeKeys).forEach(function(key) {
    var mergeValues = parameterSets.filter(Boolean).map(function(p) {
      return p[key];
    }).filter(function(value) {
      return typeof value !== "undefined";
    });
    if (mergeValues.every(function(value) {
      return (0, import_isPlainObject2.default)(value);
    })) {
      combined[key] = combineParameters2.apply(void 0, _toConsumableArray3(mergeValues));
    } else {
      combined[key] = mergeValues[mergeValues.length - 1];
    }
  });
  return combined;
};

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/hooks.js
var import_es_array_iterator5 = __toESM(require_es_array_iterator());
var import_es_string_iterator5 = __toESM(require_es_string_iterator());
var import_es_regexp_exec5 = __toESM(require_es_regexp_exec());
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray4(arr, i) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray5(arr, i) || _nonIterableRest4();
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit4(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function useSharedState(sharedId, defaultState) {
  var channel = addons.getChannel();
  var _ref = channel.last("".concat(SHARED_STATE_CHANGED, "-manager-").concat(sharedId)) || channel.last("".concat(SHARED_STATE_SET, "-manager-").concat(sharedId)) || [], _ref2 = _slicedToArray4(_ref, 1), lastValue = _ref2[0];
  var _useState = useState(lastValue || defaultState), _useState2 = _slicedToArray4(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var allListeners = useMemo(function() {
    var _ref3;
    return _ref3 = {}, _defineProperty2(_ref3, "".concat(SHARED_STATE_CHANGED, "-manager-").concat(sharedId), function manager(s) {
      return setState(s);
    }), _defineProperty2(_ref3, "".concat(SHARED_STATE_SET, "-manager-").concat(sharedId), function manager(s) {
      return setState(s);
    }), _ref3;
  }, [sharedId]);
  var emit = useChannel(allListeners, [sharedId]);
  useEffect(function() {
    if (defaultState !== void 0 && !lastValue) {
      emit("".concat(SHARED_STATE_SET, "-client-").concat(sharedId), defaultState);
    }
  }, [sharedId]);
  return [state, function(s) {
    setState(s);
    emit("".concat(SHARED_STATE_CHANGED, "-client-").concat(sharedId), s);
  }];
}
function useAddonState(addonId, defaultState) {
  return useSharedState(addonId, defaultState);
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/decorators.js
var _excluded3 = ["componentId", "title", "kind", "id", "name", "story", "parameters", "initialArgs", "argTypes"];
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function decorateStory(storyFn, decorator, bindWithContext) {
  var boundStoryFunction = bindWithContext(storyFn);
  return function(context) {
    return decorator(boundStoryFunction, context);
  };
}
function sanitizeStoryContextUpdate() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var componentId = _ref.componentId, title = _ref.title, kind = _ref.kind, id = _ref.id, name = _ref.name, story = _ref.story, parameters = _ref.parameters, initialArgs = _ref.initialArgs, argTypes = _ref.argTypes, update = _objectWithoutProperties3(_ref, _excluded3);
  return update;
}
function defaultDecorateStory(storyFn, decorators) {
  var contextStore = {};
  var bindWithContext = function bindWithContext2(decoratedStoryFn) {
    return function(update) {
      contextStore.value = Object.assign({}, contextStore.value, sanitizeStoryContextUpdate(update));
      return decoratedStoryFn(contextStore.value);
    };
  };
  var decoratedWithContextStore = decorators.reduce(function(story, decorator) {
    return decorateStory(story, decorator, bindWithContext);
  }, storyFn);
  return function(context) {
    contextStore.value = context;
    return decoratedWithContextStore(context);
  };
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/prepareStory.js
var import_es_regexp_exec6 = __toESM(require_es_regexp_exec());
var import_runtime = __toESM(require_runtime());
var import_es_array_iterator6 = __toESM(require_es_array_iterator());
var import_es_string_iterator6 = __toESM(require_es_string_iterator());
var import_util_deprecate2 = __toESM(require_browser());
var import_global = __toESM(require_window());
var import_csf4 = __toESM(require_dist());
var _templateObject4;
function _slicedToArray5(arr, i) {
  return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i) || _unsupportedIterableToArray6(arr, i) || _nonIterableRest5();
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit5(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles5(arr) {
  if (Array.isArray(arr))
    return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _toConsumableArray4(arr) {
  return _arrayWithoutHoles4(arr) || _iterableToArray4(arr) || _unsupportedIterableToArray6(arr) || _nonIterableSpread4();
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
function _iterableToArray4(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles4(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray6(arr);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _taggedTemplateLiteral3(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var argTypeDefaultValueWarning = (0, import_util_deprecate2.default)(function() {
}, esm_default(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral3(["\n  `argType.defaultValue` is deprecated and will be removed in Storybook 7.0.\n\n  https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#no-longer-inferring-default-values-of-args"], ["\n  \\`argType.defaultValue\\` is deprecated and will be removed in Storybook 7.0.\n\n  https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#no-longer-inferring-default-values-of-args"]))));
function prepareStory(storyAnnotations, componentAnnotations, projectAnnotations) {
  var _global$FEATURES;
  var id = storyAnnotations.id, name = storyAnnotations.name;
  var title = componentAnnotations.title;
  var parameters = combineParameters(projectAnnotations.parameters, componentAnnotations.parameters, storyAnnotations.parameters);
  var decorators = [].concat(_toConsumableArray4(storyAnnotations.decorators || []), _toConsumableArray4(componentAnnotations.decorators || []), _toConsumableArray4(projectAnnotations.decorators || []));
  var _projectAnnotations$a = projectAnnotations.applyDecorators, applyDecorators = _projectAnnotations$a === void 0 ? defaultDecorateStory : _projectAnnotations$a, _projectAnnotations$a2 = projectAnnotations.argTypesEnhancers, argTypesEnhancers = _projectAnnotations$a2 === void 0 ? [] : _projectAnnotations$a2, _projectAnnotations$a3 = projectAnnotations.argsEnhancers, argsEnhancers = _projectAnnotations$a3 === void 0 ? [] : _projectAnnotations$a3;
  var loaders = [].concat(_toConsumableArray4(projectAnnotations.loaders || []), _toConsumableArray4(componentAnnotations.loaders || []), _toConsumableArray4(storyAnnotations.loaders || []));
  var render = storyAnnotations.userStoryFn || storyAnnotations.render || componentAnnotations.render || projectAnnotations.render;
  var passedArgTypes = combineParameters(projectAnnotations.argTypes, componentAnnotations.argTypes, storyAnnotations.argTypes);
  var _parameters$passArgsF = parameters.passArgsFirst, passArgsFirst = _parameters$passArgsF === void 0 ? true : _parameters$passArgsF;
  parameters.__isArgsStory = passArgsFirst && render.length > 0;
  var passedArgs = Object.assign({}, projectAnnotations.args, componentAnnotations.args, storyAnnotations.args);
  var contextForEnhancers = {
    componentId: componentAnnotations.id,
    title,
    kind: title,
    // Back compat
    id,
    name,
    story: name,
    // Back compat
    component: componentAnnotations.component,
    subcomponents: componentAnnotations.subcomponents,
    parameters,
    initialArgs: passedArgs,
    argTypes: passedArgTypes
  };
  contextForEnhancers.argTypes = argTypesEnhancers.reduce(function(accumulatedArgTypes, enhancer) {
    return enhancer(Object.assign({}, contextForEnhancers, {
      argTypes: accumulatedArgTypes
    }));
  }, contextForEnhancers.argTypes);
  var defaultArgs = getValuesFromArgTypes(contextForEnhancers.argTypes);
  if (Object.keys(defaultArgs).length > 0) {
    argTypeDefaultValueWarning();
  }
  var initialArgsBeforeEnhancers = Object.assign({}, defaultArgs, passedArgs);
  contextForEnhancers.initialArgs = argsEnhancers.reduce(function(accumulatedArgs, enhancer) {
    return Object.assign({}, accumulatedArgs, enhancer(Object.assign({}, contextForEnhancers, {
      initialArgs: accumulatedArgs
    })));
  }, initialArgsBeforeEnhancers);
  if (!((_global$FEATURES = import_global.default.FEATURES) !== null && _global$FEATURES !== void 0 && _global$FEATURES.breakingChangesV7)) {
    contextForEnhancers.parameters = Object.assign({}, contextForEnhancers.parameters, {
      __id: id,
      globals: projectAnnotations.globals,
      globalTypes: projectAnnotations.globalTypes,
      args: contextForEnhancers.initialArgs,
      argTypes: contextForEnhancers.argTypes
    });
  }
  var applyLoaders = function() {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(context) {
      var loadResults, loaded;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return Promise.all(loaders.map(function(loader) {
                return loader(context);
              }));
            case 2:
              loadResults = _context.sent;
              loaded = Object.assign.apply(Object, [{}].concat(_toConsumableArray4(loadResults)));
              return _context.abrupt("return", Object.assign({}, context, {
                loaded
              }));
            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function applyLoaders2(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var undecoratedStoryFn = function undecoratedStoryFn2(context) {
    var mappedArgs = Object.entries(context.args).reduce(function(acc, _ref2) {
      var _context$argTypes$key;
      var _ref3 = _slicedToArray5(_ref2, 2), key = _ref3[0], val = _ref3[1];
      var mapping = (_context$argTypes$key = context.argTypes[key]) === null || _context$argTypes$key === void 0 ? void 0 : _context$argTypes$key.mapping;
      acc[key] = mapping && val in mapping ? mapping[val] : val;
      return acc;
    }, {});
    var includedArgs = Object.entries(mappedArgs).reduce(function(acc, _ref4) {
      var _ref5 = _slicedToArray5(_ref4, 2), key = _ref5[0], val = _ref5[1];
      var argType = context.argTypes[key] || {};
      if ((0, import_csf4.includeConditionalArg)(argType, mappedArgs, context.globals))
        acc[key] = val;
      return acc;
    }, {});
    var includedContext = Object.assign({}, context, {
      args: includedArgs
    });
    var _context$parameters$p = context.parameters.passArgsFirst, renderTimePassArgsFirst = _context$parameters$p === void 0 ? true : _context$parameters$p;
    return renderTimePassArgsFirst ? render(includedContext.args, includedContext) : render(includedContext);
  };
  var decoratedStoryFn = applyHooks(applyDecorators)(undecoratedStoryFn, decorators);
  var unboundStoryFn = function unboundStoryFn2(context) {
    var _global$FEATURES2;
    var finalContext = context;
    if ((_global$FEATURES2 = import_global.default.FEATURES) !== null && _global$FEATURES2 !== void 0 && _global$FEATURES2.argTypeTargetsV7) {
      var argsByTarget = groupArgsByTarget(Object.assign({
        args: context.args
      }, context));
      finalContext = Object.assign({}, context, {
        allArgs: context.args,
        argsByTarget,
        args: argsByTarget[NO_TARGET_NAME] || {}
      });
    }
    return decoratedStoryFn(finalContext);
  };
  var playFunction = storyAnnotations.play;
  return Object.freeze(Object.assign({}, contextForEnhancers, {
    originalStoryFn: render,
    undecoratedStoryFn,
    unboundStoryFn,
    applyLoaders,
    playFunction
  }));
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/filterArgTypes.js
var import_es_regexp_exec7 = __toESM(require_es_regexp_exec());
var import_pickBy = __toESM(require_pickBy());
var matches = function matches2(name, descriptor) {
  return Array.isArray(descriptor) ? descriptor.includes(name) : name.match(descriptor);
};
var filterArgTypes = function filterArgTypes2(argTypes, include, exclude) {
  if (!include && !exclude) {
    return argTypes;
  }
  return argTypes && (0, import_pickBy.default)(argTypes, function(argType, key) {
    var name = argType.name || key;
    return (!include || matches(name, include)) && (!exclude || !matches(name, exclude));
  });
};

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/inferControls.js
var import_es_regexp_exec8 = __toESM(require_es_regexp_exec());
var import_mapValues2 = __toESM(require_mapValues());
var inferControl = function inferControl2(argType, name, matchers) {
  var type = argType.type, options = argType.options;
  if (!type && !options) {
    return void 0;
  }
  if (matchers.color && matchers.color.test(name)) {
    var controlType = argType.type.name;
    if (controlType === "string") {
      return {
        control: {
          type: "color"
        }
      };
    }
    logger.warn('Addon controls: Control of type color only supports string, received "'.concat(controlType, '" instead'));
  }
  if (matchers.date && matchers.date.test(name)) {
    return {
      control: {
        type: "date"
      }
    };
  }
  switch (type.name) {
    case "array":
      return {
        control: {
          type: "object"
        }
      };
    case "boolean":
      return {
        control: {
          type: "boolean"
        }
      };
    case "string":
      return {
        control: {
          type: "text"
        }
      };
    case "number":
      return {
        control: {
          type: "number"
        }
      };
    case "enum": {
      var _ref = type, value = _ref.value;
      return {
        control: {
          type: (value === null || value === void 0 ? void 0 : value.length) <= 5 ? "radio" : "select"
        },
        options: value
      };
    }
    case "function":
    case "symbol":
      return null;
    default:
      return {
        control: {
          type: options ? "select" : "object"
        }
      };
  }
};
var inferControls = function inferControls2(context) {
  var argTypes = context.argTypes, _context$parameters = context.parameters, __isArgsStory = _context$parameters.__isArgsStory, _context$parameters$c = _context$parameters.controls;
  _context$parameters$c = _context$parameters$c === void 0 ? {} : _context$parameters$c;
  var _context$parameters$c2 = _context$parameters$c.include, include = _context$parameters$c2 === void 0 ? null : _context$parameters$c2, _context$parameters$c3 = _context$parameters$c.exclude, exclude = _context$parameters$c3 === void 0 ? null : _context$parameters$c3, _context$parameters$c4 = _context$parameters$c.matchers, matchers = _context$parameters$c4 === void 0 ? {} : _context$parameters$c4;
  if (!__isArgsStory)
    return argTypes;
  var filteredArgTypes = filterArgTypes(argTypes, include, exclude);
  var withControls = (0, import_mapValues2.default)(filteredArgTypes, function(argType, name) {
    return (argType === null || argType === void 0 ? void 0 : argType.type) && inferControl(argType, name, matchers);
  });
  return combineParameters(withControls, filteredArgTypes);
};
inferControls.secondPass = true;

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/normalizeProjectAnnotations.js
var import_es_array_iterator8 = __toESM(require_es_array_iterator());
var import_es_string_iterator8 = __toESM(require_es_string_iterator());
var import_es_regexp_exec9 = __toESM(require_es_regexp_exec());

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/inferArgTypes.js
var import_es_array_iterator7 = __toESM(require_es_array_iterator());
var import_es_string_iterator7 = __toESM(require_es_string_iterator());
var import_mapValues3 = __toESM(require_mapValues());
var _templateObject5;
function _taggedTemplateLiteral4(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
var inferType = function inferType2(value, name, visited) {
  var type = _typeof2(value);
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "function":
    case "symbol":
      return {
        name: type
      };
    default:
      break;
  }
  if (value) {
    if (visited.has(value)) {
      logger.warn(esm_default(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral4(["\n        We've detected a cycle in arg '", "'. Args should be JSON-serializable.\n\n        Consider using the mapping feature or fully custom args:\n        - Mapping: https://storybook.js.org/docs/react/writing-stories/args#mapping-to-complex-arg-values\n        - Custom args: https://storybook.js.org/docs/react/essentials/controls#fully-custom-args\n      "])), name));
      return {
        name: "other",
        value: "cyclic object"
      };
    }
    visited.add(value);
    if (Array.isArray(value)) {
      var childType = value.length > 0 ? inferType2(value[0], name, new Set(visited)) : {
        name: "other",
        value: "unknown"
      };
      return {
        name: "array",
        value: childType
      };
    }
    var fieldTypes = (0, import_mapValues3.default)(value, function(field) {
      return inferType2(field, name, new Set(visited));
    });
    return {
      name: "object",
      value: fieldTypes
    };
  }
  return {
    name: "object",
    value: {}
  };
};
var inferArgTypes = function inferArgTypes2(context) {
  var id = context.id, _context$argTypes = context.argTypes, userArgTypes = _context$argTypes === void 0 ? {} : _context$argTypes, _context$initialArgs = context.initialArgs, initialArgs = _context$initialArgs === void 0 ? {} : _context$initialArgs;
  var argTypes = (0, import_mapValues3.default)(initialArgs, function(arg, key) {
    return {
      name: key,
      type: inferType(arg, "".concat(id, ".").concat(key), /* @__PURE__ */ new Set())
    };
  });
  var userArgTypesNames = (0, import_mapValues3.default)(userArgTypes, function(argType, key) {
    return {
      name: key
    };
  });
  return combineParameters(argTypes, userArgTypesNames, userArgTypes);
};
inferArgTypes.secondPass = true;

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/normalizeProjectAnnotations.js
var _excluded4 = ["argTypes", "globalTypes", "argTypesEnhancers"];
function _toConsumableArray5(arr) {
  return _arrayWithoutHoles5(arr) || _iterableToArray5(arr) || _unsupportedIterableToArray7(arr) || _nonIterableSpread5();
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray7(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray7(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray7(o, minLen);
}
function _iterableToArray5(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles5(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray7(arr);
}
function _arrayLikeToArray7(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _objectWithoutProperties4(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose4(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function normalizeProjectAnnotations(_ref) {
  var argTypes = _ref.argTypes, globalTypes = _ref.globalTypes, argTypesEnhancers = _ref.argTypesEnhancers, annotations = _objectWithoutProperties4(_ref, _excluded4);
  return Object.assign({}, argTypes && {
    argTypes: normalizeInputTypes(argTypes)
  }, globalTypes && {
    globalTypes: normalizeInputTypes(globalTypes)
  }, {
    argTypesEnhancers: [].concat(_toConsumableArray5(argTypesEnhancers || []), [
      inferArgTypes,
      // inferControls technically should only run if the user is using the controls addon,
      // and so should be added by a preset there. However, as it seems some code relies on controls
      // annotations (in particular the angular implementation's `cleanArgsDecorator`), for backwards
      // compatibility reasons, we will leave this in the store until 7.0
      inferControls
    ])
  }, annotations);
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/composeConfigs.js
var import_es_array_iterator9 = __toESM(require_es_array_iterator());
var import_es_string_iterator9 = __toESM(require_es_string_iterator());
var import_es_regexp_exec10 = __toESM(require_es_regexp_exec());
function _toConsumableArray6(arr) {
  return _arrayWithoutHoles6(arr) || _iterableToArray6(arr) || _unsupportedIterableToArray8(arr) || _nonIterableSpread6();
}
function _nonIterableSpread6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray8(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray8(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray8(o, minLen);
}
function _iterableToArray6(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles6(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray8(arr);
}
function _arrayLikeToArray8(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function getField(moduleExportList, field) {
  return moduleExportList.map(function(xs) {
    return xs[field];
  }).filter(Boolean);
}
function getArrayField(moduleExportList, field) {
  return getField(moduleExportList, field).reduce(function(a, b) {
    return [].concat(_toConsumableArray6(a), _toConsumableArray6(b));
  }, []);
}
function getObjectField(moduleExportList, field) {
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray6(getField(moduleExportList, field))));
}
function getSingletonField(moduleExportList, field) {
  return getField(moduleExportList, field).pop();
}
function composeConfigs(moduleExportList) {
  var allArgTypeEnhancers = getArrayField(moduleExportList, "argTypesEnhancers");
  return {
    parameters: combineParameters.apply(void 0, _toConsumableArray6(getField(moduleExportList, "parameters"))),
    decorators: getArrayField(moduleExportList, "decorators"),
    args: getObjectField(moduleExportList, "args"),
    argsEnhancers: getArrayField(moduleExportList, "argsEnhancers"),
    argTypes: getObjectField(moduleExportList, "argTypes"),
    argTypesEnhancers: [].concat(_toConsumableArray6(allArgTypeEnhancers.filter(function(e) {
      return !e.secondPass;
    })), _toConsumableArray6(allArgTypeEnhancers.filter(function(e) {
      return e.secondPass;
    }))),
    globals: getObjectField(moduleExportList, "globals"),
    globalTypes: getObjectField(moduleExportList, "globalTypes"),
    loaders: getArrayField(moduleExportList, "loaders"),
    render: getSingletonField(moduleExportList, "render"),
    renderToDOM: getSingletonField(moduleExportList, "renderToDOM"),
    applyDecorators: getSingletonField(moduleExportList, "applyDecorators")
  };
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/csf/testing-utils/index.js
var import_es_array_iterator10 = __toESM(require_es_array_iterator());
var import_es_string_iterator10 = __toESM(require_es_string_iterator());
var import_es_regexp_exec11 = __toESM(require_es_regexp_exec());
var import_csf5 = __toESM(require_dist());
var _excluded5 = ["default", "__esModule", "__namedExportsOrder"];
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray6(arr, i) {
  return _arrayWithHoles6(arr) || _iterableToArrayLimit6(arr, i) || _unsupportedIterableToArray9(arr, i) || _nonIterableRest6();
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray9(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray9(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray9(o, minLen);
}
function _arrayLikeToArray9(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit6(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles6(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _objectWithoutProperties5(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose5(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var GLOBAL_STORYBOOK_PROJECT_ANNOTATIONS = {};
function setProjectAnnotations(projectAnnotations) {
  var annotations = Array.isArray(projectAnnotations) ? projectAnnotations : [projectAnnotations];
  GLOBAL_STORYBOOK_PROJECT_ANNOTATIONS = composeConfigs(annotations);
}
function composeStory(storyAnnotations, componentAnnotations) {
  var _componentAnnotations, _storyAnnotations$sto;
  var projectAnnotations = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : GLOBAL_STORYBOOK_PROJECT_ANNOTATIONS;
  var defaultConfig = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var exportsName = arguments.length > 4 ? arguments[4] : void 0;
  if (storyAnnotations === void 0) {
    throw new Error("Expected a story but received undefined.");
  }
  componentAnnotations.title = (_componentAnnotations = componentAnnotations.title) !== null && _componentAnnotations !== void 0 ? _componentAnnotations : "ComposedStory";
  var normalizedComponentAnnotations = normalizeComponentAnnotations(componentAnnotations);
  var storyName = exportsName || storyAnnotations.storyName || ((_storyAnnotations$sto = storyAnnotations.story) === null || _storyAnnotations$sto === void 0 ? void 0 : _storyAnnotations$sto.name) || storyAnnotations.name;
  var normalizedStory = normalizeStory(storyName, storyAnnotations, normalizedComponentAnnotations);
  var normalizedProjectAnnotations = normalizeProjectAnnotations(Object.assign({}, projectAnnotations, defaultConfig));
  var story = prepareStory(normalizedStory, normalizedComponentAnnotations, normalizedProjectAnnotations);
  var defaultGlobals = getValuesFromArgTypes(projectAnnotations.globalTypes);
  var composedStory = function composedStory2(extraArgs) {
    var context = Object.assign({}, story, {
      hooks: new HooksContext(),
      globals: defaultGlobals,
      args: Object.assign({}, story.initialArgs, extraArgs)
    });
    return story.unboundStoryFn(context);
  };
  composedStory.storyName = storyName;
  composedStory.args = story.initialArgs;
  composedStory.play = story.playFunction;
  composedStory.parameters = story.parameters;
  return composedStory;
}
function composeStories(storiesImport, globalConfig, composeStoryFn) {
  var meta = storiesImport.default, __esModule = storiesImport.__esModule, __namedExportsOrder = storiesImport.__namedExportsOrder, stories = _objectWithoutProperties5(storiesImport, _excluded5);
  var composedStories = Object.entries(stories).reduce(function(storiesMap, _ref) {
    var _ref2 = _slicedToArray6(_ref, 2), exportsName = _ref2[0], story = _ref2[1];
    if (!(0, import_csf5.isExportStory)(exportsName, meta)) {
      return storiesMap;
    }
    var result = Object.assign(storiesMap, _defineProperty3({}, exportsName, composeStoryFn(story, meta, globalConfig, exportsName)));
    return result;
  }, {});
  return composedStories;
}

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/StoryStore.js
var import_runtime2 = __toESM(require_runtime());
var import_es_array_iterator13 = __toESM(require_es_array_iterator());
var import_es_string_iterator13 = __toESM(require_es_string_iterator());
var import_es_regexp_exec14 = __toESM(require_es_regexp_exec());
var import_memoizerific = __toESM(require_memoizerific());
var import_mapValues4 = __toESM(require_mapValues());
var import_pick = __toESM(require_pick());
var import_global2 = __toESM(require_window());
var import_synchronous_promise = __toESM(require_synchronous_promise());

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/StoryIndexStore.js
var import_es_array_iterator11 = __toESM(require_es_array_iterator());
var import_es_string_iterator11 = __toESM(require_es_string_iterator());
var import_es_regexp_exec12 = __toESM(require_es_regexp_exec());
var _templateObject6;
function _taggedTemplateLiteral5(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _slicedToArray7(arr, i) {
  return _arrayWithHoles7(arr) || _iterableToArrayLimit7(arr, i) || _unsupportedIterableToArray10(arr, i) || _nonIterableRest7();
}
function _nonIterableRest7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray10(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray10(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray10(o, minLen);
}
function _arrayLikeToArray10(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit7(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles7(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var StoryIndexStore = function() {
  function StoryIndexStore2() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
      v: 3,
      stories: {}
    }, stories = _ref.stories;
    _classCallCheck(this, StoryIndexStore2);
    this.channel = void 0;
    this.stories = void 0;
    this.stories = stories;
  }
  _createClass(StoryIndexStore2, [{
    key: "storyIdFromSpecifier",
    value: function storyIdFromSpecifier(specifier) {
      var storyIds = Object.keys(this.stories);
      if (specifier === "*") {
        return storyIds[0];
      }
      if (typeof specifier === "string") {
        if (storyIds.indexOf(specifier) >= 0) {
          return specifier;
        }
        return storyIds.find(function(storyId) {
          return storyId.startsWith(specifier);
        });
      }
      var name = specifier.name, title = specifier.title;
      var match = Object.entries(this.stories).find(function(_ref2) {
        var _ref3 = _slicedToArray7(_ref2, 2), id = _ref3[0], story = _ref3[1];
        return story.name === name && story.title === title;
      });
      return match && match[0];
    }
  }, {
    key: "storyIdToEntry",
    value: function storyIdToEntry(storyId) {
      var storyEntry = this.stories[storyId];
      if (!storyEntry) {
        throw new Error(esm_default(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral5(["Couldn't find story matching '", "' after HMR.\n      - Did you remove it from your CSF file?\n      - Are you sure a story with that id exists?\n      - Please check your stories field of your main.js config.\n      - Also check the browser console and terminal for error messages."])), storyId));
      }
      return storyEntry;
    }
  }]);
  return StoryIndexStore2;
}();

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/ArgsStore.js
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function deleteUndefined(obj) {
  Object.keys(obj).forEach(function(key) {
    return obj[key] === void 0 && delete obj[key];
  });
  return obj;
}
var ArgsStore = function() {
  function ArgsStore2() {
    _classCallCheck2(this, ArgsStore2);
    this.initialArgsByStoryId = {};
    this.argsByStoryId = {};
  }
  _createClass2(ArgsStore2, [{
    key: "get",
    value: function get(storyId) {
      if (!(storyId in this.argsByStoryId)) {
        throw new Error("No args known for ".concat(storyId, " -- has it been rendered yet?"));
      }
      return this.argsByStoryId[storyId];
    }
  }, {
    key: "setInitial",
    value: function setInitial(story) {
      if (!this.initialArgsByStoryId[story.id]) {
        this.initialArgsByStoryId[story.id] = story.initialArgs;
        this.argsByStoryId[story.id] = story.initialArgs;
      } else if (this.initialArgsByStoryId[story.id] !== story.initialArgs) {
        var delta = deepDiff(this.initialArgsByStoryId[story.id], this.argsByStoryId[story.id]);
        this.initialArgsByStoryId[story.id] = story.initialArgs;
        this.argsByStoryId[story.id] = story.initialArgs;
        if (delta !== DEEPLY_EQUAL) {
          this.updateFromDelta(story, delta);
        }
      }
    }
  }, {
    key: "updateFromDelta",
    value: function updateFromDelta(story, delta) {
      var validatedDelta = validateOptions(delta, story.argTypes);
      this.argsByStoryId[story.id] = combineArgs(this.argsByStoryId[story.id], validatedDelta);
    }
  }, {
    key: "updateFromPersisted",
    value: function updateFromPersisted(story, persisted) {
      var mappedPersisted = mapArgsToTypes(persisted, story.argTypes);
      return this.updateFromDelta(story, mappedPersisted);
    }
  }, {
    key: "update",
    value: function update(storyId, argsUpdate) {
      if (!(storyId in this.argsByStoryId)) {
        throw new Error("No args known for ".concat(storyId, " -- has it been rendered yet?"));
      }
      this.argsByStoryId[storyId] = deleteUndefined(Object.assign({}, this.argsByStoryId[storyId], argsUpdate));
    }
  }]);
  return ArgsStore2;
}();

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/GlobalsStore.js
var import_es_regexp_exec13 = __toESM(require_es_regexp_exec());
var import_es_array_iterator12 = __toESM(require_es_array_iterator());
var import_es_string_iterator12 = __toESM(require_es_string_iterator());
var import_util_deprecate3 = __toESM(require_browser());
var _templateObject7;
function _slicedToArray8(arr, i) {
  return _arrayWithHoles8(arr) || _iterableToArrayLimit8(arr, i) || _unsupportedIterableToArray11(arr, i) || _nonIterableRest8();
}
function _nonIterableRest8() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit8(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles8(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _toConsumableArray7(arr) {
  return _arrayWithoutHoles7(arr) || _iterableToArray7(arr) || _unsupportedIterableToArray11(arr) || _nonIterableSpread7();
}
function _nonIterableSpread7() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray11(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray11(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray11(o, minLen);
}
function _iterableToArray7(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles7(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray11(arr);
}
function _arrayLikeToArray11(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _taggedTemplateLiteral6(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var setUndeclaredWarning = (0, import_util_deprecate3.default)(function() {
}, esm_default(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral6(["\n    Setting a global value that is undeclared (i.e. not in the user's initial set of globals\n    or globalTypes) is deprecated and will have no effect in 7.0.\n  "]))));
var GlobalsStore = function() {
  function GlobalsStore2() {
    _classCallCheck3(this, GlobalsStore2);
    this.allowedGlobalNames = void 0;
    this.initialGlobals = void 0;
    this.globals = {};
  }
  _createClass3(GlobalsStore2, [{
    key: "set",
    value: function set(_ref) {
      var _ref$globals = _ref.globals, globals = _ref$globals === void 0 ? {} : _ref$globals, _ref$globalTypes = _ref.globalTypes, globalTypes = _ref$globalTypes === void 0 ? {} : _ref$globalTypes;
      var delta = this.initialGlobals && deepDiff(this.initialGlobals, this.globals);
      this.allowedGlobalNames = new Set([].concat(_toConsumableArray7(Object.keys(globals)), _toConsumableArray7(Object.keys(globalTypes))));
      var defaultGlobals = getValuesFromArgTypes(globalTypes);
      this.initialGlobals = Object.assign({}, defaultGlobals, globals);
      this.globals = this.initialGlobals;
      if (delta && delta !== DEEPLY_EQUAL) {
        this.updateFromPersisted(delta);
      }
    }
  }, {
    key: "filterAllowedGlobals",
    value: function filterAllowedGlobals(globals) {
      var _this = this;
      return Object.entries(globals).reduce(function(acc, _ref2) {
        var _ref3 = _slicedToArray8(_ref2, 2), key = _ref3[0], value = _ref3[1];
        if (_this.allowedGlobalNames.has(key))
          acc[key] = value;
        return acc;
      }, {});
    }
  }, {
    key: "updateFromPersisted",
    value: function updateFromPersisted(persisted) {
      var allowedUrlGlobals = this.filterAllowedGlobals(persisted);
      this.globals = Object.assign({}, this.globals, allowedUrlGlobals);
    }
  }, {
    key: "get",
    value: function get() {
      return this.globals;
    }
  }, {
    key: "update",
    value: function update(newGlobals) {
      var _this2 = this;
      Object.keys(newGlobals).forEach(function(key) {
        if (!_this2.allowedGlobalNames.has(key)) {
          setUndeclaredWarning();
        }
      });
      this.globals = Object.assign({}, this.globals, newGlobals);
    }
  }]);
  return GlobalsStore2;
}();

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/StoryStore.js
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray9(arr, i) {
  return _arrayWithHoles9(arr) || _iterableToArrayLimit9(arr, i) || _unsupportedIterableToArray12(arr, i) || _nonIterableRest9();
}
function _nonIterableRest9() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray12(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray12(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray12(o, minLen);
}
function _arrayLikeToArray12(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit9(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles9(arr) {
  if (Array.isArray(arr))
    return arr;
}
function asyncGeneratorStep2(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator2(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep2(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _classCallCheck4(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties4(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass4(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties4(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties4(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var CSF_CACHE_SIZE = 1e3;
var STORY_CACHE_SIZE = 1e4;
var StoryStore = function() {
  function StoryStore2() {
    var _this = this;
    _classCallCheck4(this, StoryStore2);
    this.storyIndex = void 0;
    this.importFn = void 0;
    this.projectAnnotations = void 0;
    this.globals = void 0;
    this.args = void 0;
    this.hooks = void 0;
    this.cachedCSFFiles = void 0;
    this.processCSFFileWithCache = void 0;
    this.prepareStoryWithCache = void 0;
    this.initializationPromise = void 0;
    this.resolveInitializationPromise = void 0;
    this.getStoriesJsonData = function() {
      var value = _this.getSetStoriesPayload();
      var allowedParameters = ["fileName", "docsOnly", "framework", "__id", "__isArgsStory"];
      var stories = (0, import_mapValues4.default)(value.stories, function(story) {
        var _global$FEATURES;
        return Object.assign({}, (0, import_pick.default)(story, ["id", "name", "title"]), {
          importPath: _this.storyIndex.stories[story.id].importPath
        }, !((_global$FEATURES = import_global2.default.FEATURES) !== null && _global$FEATURES !== void 0 && _global$FEATURES.breakingChangesV7) && {
          kind: story.title,
          story: story.name,
          parameters: Object.assign({}, (0, import_pick.default)(story.parameters, allowedParameters), {
            fileName: _this.storyIndex.stories[story.id].importPath
          })
        });
      });
      return {
        v: 3,
        stories
      };
    };
    this.globals = new GlobalsStore();
    this.args = new ArgsStore();
    this.hooks = {};
    this.processCSFFileWithCache = (0, import_memoizerific.default)(CSF_CACHE_SIZE)(processCSFFile);
    this.prepareStoryWithCache = (0, import_memoizerific.default)(STORY_CACHE_SIZE)(prepareStory);
    this.initializationPromise = new import_synchronous_promise.SynchronousPromise(function(resolve) {
      _this.resolveInitializationPromise = resolve;
    });
  }
  _createClass4(StoryStore2, [{
    key: "setProjectAnnotations",
    value: function setProjectAnnotations2(projectAnnotations) {
      this.projectAnnotations = normalizeProjectAnnotations(projectAnnotations);
      var globals = projectAnnotations.globals, globalTypes = projectAnnotations.globalTypes;
      this.globals.set({
        globals,
        globalTypes
      });
    }
  }, {
    key: "initialize",
    value: function initialize(_ref) {
      var storyIndex = _ref.storyIndex, importFn = _ref.importFn, _ref$cache = _ref.cache, cache = _ref$cache === void 0 ? false : _ref$cache;
      this.storyIndex = new StoryIndexStore(storyIndex);
      this.importFn = importFn;
      this.resolveInitializationPromise();
      return cache ? this.cacheAllCSFFiles() : import_synchronous_promise.SynchronousPromise.resolve();
    }
    // This means that one of the CSF files has changed.
    // If the `importFn` has changed, we will invalidate both caches.
    // If the `storyIndex` data has changed, we may or may not invalidate the caches, depending
    // on whether we've loaded the relevant files yet.
  }, {
    key: "onStoriesChanged",
    value: function() {
      var _onStoriesChanged = _asyncToGenerator2(regeneratorRuntime.mark(function _callee(_ref2) {
        var importFn, storyIndex;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                importFn = _ref2.importFn, storyIndex = _ref2.storyIndex;
                if (importFn)
                  this.importFn = importFn;
                if (storyIndex)
                  this.storyIndex.stories = storyIndex.stories;
                if (!this.cachedCSFFiles) {
                  _context.next = 6;
                  break;
                }
                _context.next = 6;
                return this.cacheAllCSFFiles();
              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function onStoriesChanged(_x) {
        return _onStoriesChanged.apply(this, arguments);
      }
      return onStoriesChanged;
    }()
    // To load a single CSF file to service a story we need to look up the importPath in the index
  }, {
    key: "loadCSFFileByStoryId",
    value: function loadCSFFileByStoryId(storyId) {
      var _this2 = this;
      var _this$storyIndex$stor = this.storyIndex.storyIdToEntry(storyId), importPath = _this$storyIndex$stor.importPath, title = _this$storyIndex$stor.title;
      return this.importFn(importPath).then(function(moduleExports) {
        return (
          // We pass the title in here as it may have been generated by autoTitle on the server.
          _this2.processCSFFileWithCache(moduleExports, importPath, title)
        );
      });
    }
  }, {
    key: "loadAllCSFFiles",
    value: function loadAllCSFFiles() {
      var _this3 = this;
      var importPaths = {};
      Object.entries(this.storyIndex.stories).forEach(function(_ref3) {
        var _ref4 = _slicedToArray9(_ref3, 2), storyId = _ref4[0], importPath = _ref4[1].importPath;
        importPaths[importPath] = storyId;
      });
      var csfFilePromiseList = Object.entries(importPaths).map(function(_ref5) {
        var _ref6 = _slicedToArray9(_ref5, 2), importPath = _ref6[0], storyId = _ref6[1];
        return _this3.loadCSFFileByStoryId(storyId).then(function(csfFile) {
          return {
            importPath,
            csfFile
          };
        });
      });
      return import_synchronous_promise.SynchronousPromise.all(csfFilePromiseList).then(function(list) {
        return list.reduce(function(acc, _ref7) {
          var importPath = _ref7.importPath, csfFile = _ref7.csfFile;
          acc[importPath] = csfFile;
          return acc;
        }, {});
      });
    }
  }, {
    key: "cacheAllCSFFiles",
    value: function cacheAllCSFFiles() {
      var _this4 = this;
      return this.initializationPromise.then(function() {
        return _this4.loadAllCSFFiles().then(function(csfFiles) {
          _this4.cachedCSFFiles = csfFiles;
        });
      });
    }
    // Load the CSF file for a story and prepare the story from it and the project annotations.
  }, {
    key: "loadStory",
    value: function() {
      var _loadStory = _asyncToGenerator2(regeneratorRuntime.mark(function _callee2(_ref8) {
        var storyId, csfFile;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                storyId = _ref8.storyId;
                _context2.next = 3;
                return this.initializationPromise;
              case 3:
                _context2.next = 5;
                return this.loadCSFFileByStoryId(storyId);
              case 5:
                csfFile = _context2.sent;
                return _context2.abrupt("return", this.storyFromCSFFile({
                  storyId,
                  csfFile
                }));
              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function loadStory(_x2) {
        return _loadStory.apply(this, arguments);
      }
      return loadStory;
    }()
    // This function is synchronous for convenience -- often times if you have a CSF file already
    // it is easier not to have to await `loadStory`.
  }, {
    key: "storyFromCSFFile",
    value: function storyFromCSFFile(_ref9) {
      var storyId = _ref9.storyId, csfFile = _ref9.csfFile;
      var storyAnnotations = csfFile.stories[storyId];
      if (!storyAnnotations) {
        throw new Error("Didn't find '".concat(storyId, "' in CSF file, this is unexpected"));
      }
      var componentAnnotations = csfFile.meta;
      var story = this.prepareStoryWithCache(storyAnnotations, componentAnnotations, this.projectAnnotations);
      this.args.setInitial(story);
      this.hooks[story.id] = this.hooks[story.id] || new HooksContext();
      return story;
    }
    // If we have a CSF file we can get all the stories from it synchronously
  }, {
    key: "componentStoriesFromCSFFile",
    value: function componentStoriesFromCSFFile(_ref10) {
      var _this5 = this;
      var csfFile = _ref10.csfFile;
      return Object.keys(this.storyIndex.stories).filter(function(storyId) {
        return !!csfFile.stories[storyId];
      }).map(function(storyId) {
        return _this5.storyFromCSFFile({
          storyId,
          csfFile
        });
      });
    }
    // A prepared story does not include args, globals or hooks. These are stored in the story store
    // and updated separtely to the (immutable) story.
  }, {
    key: "getStoryContext",
    value: function getStoryContext(story) {
      return Object.assign({}, story, {
        args: this.args.get(story.id),
        globals: this.globals.get(),
        hooks: this.hooks[story.id]
      });
    }
  }, {
    key: "cleanupStory",
    value: function cleanupStory(story) {
      this.hooks[story.id].clean();
    }
  }, {
    key: "extract",
    value: function extract() {
      var _this6 = this;
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        includeDocsOnly: false
      };
      if (!this.cachedCSFFiles) {
        throw new Error("Cannot call extract() unless you call cacheAllCSFFiles() first.");
      }
      return Object.entries(this.storyIndex.stories).reduce(function(acc, _ref11) {
        var _ref12 = _slicedToArray9(_ref11, 2), storyId = _ref12[0], importPath = _ref12[1].importPath;
        var csfFile = _this6.cachedCSFFiles[importPath];
        var story = _this6.storyFromCSFFile({
          storyId,
          csfFile
        });
        if (!options.includeDocsOnly && story.parameters.docsOnly) {
          return acc;
        }
        acc[storyId] = Object.entries(story).reduce(function(storyAcc, _ref13) {
          var _ref14 = _slicedToArray9(_ref13, 2), key = _ref14[0], value = _ref14[1];
          if (typeof value === "function") {
            return storyAcc;
          }
          if (Array.isArray(value)) {
            return Object.assign(storyAcc, _defineProperty4({}, key, value.slice().sort()));
          }
          return Object.assign(storyAcc, _defineProperty4({}, key, value));
        }, {
          args: story.initialArgs
        });
        return acc;
      }, {});
    }
  }, {
    key: "getSetStoriesPayload",
    value: function getSetStoriesPayload() {
      var stories = this.extract({
        includeDocsOnly: true
      });
      var kindParameters = Object.values(stories).reduce(function(acc, _ref15) {
        var title = _ref15.title;
        acc[title] = {};
        return acc;
      }, {});
      return {
        v: 2,
        globals: this.globals.get(),
        globalParameters: {},
        kindParameters,
        stories
      };
    }
  }, {
    key: "raw",
    value: function raw() {
      var _this7 = this;
      return Object.values(this.extract()).map(function(_ref16) {
        var id = _ref16.id;
        return _this7.fromId(id);
      });
    }
  }, {
    key: "fromId",
    value: function fromId(storyId) {
      var _this8 = this;
      if (!this.cachedCSFFiles) {
        throw new Error("Cannot call fromId/raw() unless you call cacheAllCSFFiles() first.");
      }
      var importPath;
      try {
        var _this$storyIndex$stor2 = this.storyIndex.storyIdToEntry(storyId);
        importPath = _this$storyIndex$stor2.importPath;
      } catch (err) {
        return null;
      }
      var csfFile = this.cachedCSFFiles[importPath];
      var story = this.storyFromCSFFile({
        storyId,
        csfFile
      });
      return Object.assign({}, story, {
        storyFn: function storyFn(update) {
          var context = Object.assign({}, _this8.getStoryContext(story), {
            viewMode: "story"
          });
          return story.unboundStoryFn(Object.assign({}, context, update));
        }
      });
    }
  }]);
  return StoryStore2;
}();

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/autoTitle.js
var import_es_array_iterator14 = __toESM(require_es_array_iterator());
var import_es_string_iterator14 = __toESM(require_es_string_iterator());
var import_es_regexp_exec15 = __toESM(require_es_regexp_exec());
var import_slash = __toESM(require_slash());
var _templateObject8;
function _taggedTemplateLiteral7(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _toArray(arr) {
  return _arrayWithHoles10(arr) || _iterableToArray8(arr) || _unsupportedIterableToArray13(arr) || _nonIterableRest10();
}
function _nonIterableRest10() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _arrayWithHoles10(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _toConsumableArray8(arr) {
  return _arrayWithoutHoles8(arr) || _iterableToArray8(arr) || _unsupportedIterableToArray13(arr) || _nonIterableSpread8();
}
function _nonIterableSpread8() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray13(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray13(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray13(o, minLen);
}
function _iterableToArray8(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles8(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray13(arr);
}
function _arrayLikeToArray13(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var stripExtension = function stripExtension2(path) {
  var parts = _toConsumableArray8(path);
  var last = parts[parts.length - 1];
  var dotIndex = last.indexOf(".");
  var stripped = dotIndex > 0 ? last.substr(0, dotIndex) : last;
  parts[parts.length - 1] = stripped;
  var _parts = parts, _parts2 = _toArray(_parts), first = _parts2[0], rest = _parts2.slice(1);
  if (first === "") {
    parts = rest;
  }
  return parts;
};
var indexRe = /^index$/i;
var removeRedundantFilename = function removeRedundantFilename2(paths) {
  var prevVal;
  return paths.filter(function(val, index) {
    if (index === paths.length - 1 && (val === prevVal || indexRe.test(val))) {
      return false;
    }
    prevVal = val;
    return true;
  });
};
function pathJoin(paths) {
  var slashes = new RegExp("/{1,}", "g");
  return paths.join("/").replace(slashes, "/");
}
var userOrAutoTitleFromSpecifier = function userOrAutoTitleFromSpecifier2(fileName, entry, userTitle) {
  var _ref = entry || {}, directory = _ref.directory, importPathMatcher = _ref.importPathMatcher, _ref$titlePrefix = _ref.titlePrefix, titlePrefix = _ref$titlePrefix === void 0 ? "" : _ref$titlePrefix;
  if (typeof fileName === "number") {
    once.warn(esm_default(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral7(['\n      CSF Auto-title received a numeric fileName. This typically happens when\n      webpack is mis-configured in production mode. To force webpack to produce\n      filenames, set optimization.moduleIds = "named" in your webpack config.\n    ']))));
  }
  var normalizedFileName = (0, import_slash.default)(String(fileName));
  if (importPathMatcher.exec(normalizedFileName)) {
    if (!userTitle) {
      var suffix = normalizedFileName.replace(directory, "");
      var titleAndSuffix = (0, import_slash.default)(pathJoin([titlePrefix, suffix]));
      var path = titleAndSuffix.split("/");
      path = stripExtension(path);
      path = removeRedundantFilename(path);
      return path.join("/");
    }
    if (!titlePrefix) {
      return userTitle;
    }
    return (0, import_slash.default)(pathJoin([titlePrefix, userTitle]));
  }
  return void 0;
};
var userOrAutoTitle = function userOrAutoTitle2(fileName, storiesEntries, userTitle) {
  for (var i = 0; i < storiesEntries.length; i += 1) {
    var title = userOrAutoTitleFromSpecifier(fileName, storiesEntries[i], userTitle);
    if (title)
      return title;
  }
  return userTitle || void 0;
};

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/sortStories.js
var import_stable = __toESM(require_stable());

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/storySort.js
var import_es_regexp_exec16 = __toESM(require_es_regexp_exec());
var STORY_KIND_PATH_SEPARATOR = /\s*\/\s*/;
var storySort = function storySort2() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return function(a, b) {
    if (a.title === b.title && !options.includeNames) {
      return 0;
    }
    var method = options.method || "configure";
    var order = options.order || [];
    var storyTitleA = a.title.trim().split(STORY_KIND_PATH_SEPARATOR);
    var storyTitleB = b.title.trim().split(STORY_KIND_PATH_SEPARATOR);
    if (options.includeNames) {
      storyTitleA.push(a.name);
      storyTitleB.push(b.name);
    }
    var depth = 0;
    while (storyTitleA[depth] || storyTitleB[depth]) {
      if (!storyTitleA[depth]) {
        return -1;
      }
      if (!storyTitleB[depth]) {
        return 1;
      }
      var nameA = storyTitleA[depth];
      var nameB = storyTitleB[depth];
      if (nameA !== nameB) {
        var indexA = order.indexOf(nameA);
        var indexB = order.indexOf(nameB);
        var indexWildcard = order.indexOf("*");
        if (indexA !== -1 || indexB !== -1) {
          if (indexA === -1) {
            if (indexWildcard !== -1) {
              indexA = indexWildcard;
            } else {
              indexA = order.length;
            }
          }
          if (indexB === -1) {
            if (indexWildcard !== -1) {
              indexB = indexWildcard;
            } else {
              indexB = order.length;
            }
          }
          return indexA - indexB;
        }
        if (method === "configure") {
          return 0;
        }
        return nameA.localeCompare(nameB, options.locales ? options.locales : void 0, {
          numeric: true,
          sensitivity: "accent"
        });
      }
      var index = order.indexOf(nameA);
      order = index !== -1 && Array.isArray(order[index + 1]) ? order[index + 1] : [];
      depth += 1;
    }
    return 0;
  };
};

// ../../.yarn/__virtual__/@storybook-store-virtual-92ec9d5132/0/cache/@storybook-store-npm-6.5.16-6d1eb1c50c-f438fb020a.zip/node_modules/@storybook/store/dist/esm/sortStories.js
var _templateObject9;
function _taggedTemplateLiteral8(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var sortStoriesCommon = function sortStoriesCommon2(stories, storySortParameter, fileNameOrder) {
  if (storySortParameter) {
    var sortFn;
    if (typeof storySortParameter === "function") {
      sortFn = storySortParameter;
    } else {
      sortFn = storySort(storySortParameter);
    }
    import_stable.default.inplace(stories, sortFn);
  } else {
    import_stable.default.inplace(stories, function(s1, s2) {
      return fileNameOrder.indexOf(s1.importPath) - fileNameOrder.indexOf(s2.importPath);
    });
  }
  return stories;
};
var sortStoriesV7 = function sortStoriesV72(stories, storySortParameter, fileNameOrder) {
  try {
    return sortStoriesCommon(stories, storySortParameter, fileNameOrder);
  } catch (err) {
    throw new Error(esm_default(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral8(["\n    Error sorting stories with sort parameter ", ":\n\n    > ", "\n    \n    Are you using a V6-style sort function in V7 mode?\n\n    More info: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#v7-style-story-sort\n  "])), storySortParameter, err.message));
  }
};
var toIndexEntry = function toIndexEntry2(story) {
  var id = story.id, title = story.title, name = story.name, parameters = story.parameters;
  return {
    id,
    title,
    name,
    importPath: parameters.fileName
  };
};
var sortStoriesV6 = function sortStoriesV62(stories, storySortParameter, fileNameOrder) {
  if (storySortParameter && typeof storySortParameter === "function") {
    import_stable.default.inplace(stories, storySortParameter);
    return stories.map(function(s) {
      return toIndexEntry(s[1]);
    });
  }
  var storiesV7 = stories.map(function(s) {
    return toIndexEntry(s[1]);
  });
  return sortStoriesCommon(storiesV7, storySortParameter, fileNameOrder);
};

export {
  mapArgsToTypes,
  combineArgs,
  validateOptions,
  DEEPLY_EQUAL,
  deepDiff,
  NO_TARGET_NAME,
  groupArgsByTarget,
  noTargetArgs,
  getValuesFromArgTypes,
  normalizeInputType,
  normalizeInputTypes,
  normalizeStory,
  normalizeComponentAnnotations,
  processCSFFile,
  combineParameters,
  useSharedState,
  useAddonState,
  decorateStory,
  sanitizeStoryContextUpdate,
  defaultDecorateStory,
  prepareStory,
  filterArgTypes,
  inferControls,
  normalizeProjectAnnotations,
  getField,
  getArrayField,
  getObjectField,
  getSingletonField,
  composeConfigs,
  setProjectAnnotations,
  composeStory,
  composeStories,
  StoryStore,
  userOrAutoTitleFromSpecifier,
  userOrAutoTitle,
  sortStoriesV7,
  sortStoriesV6
};
//# sourceMappingURL=chunk-5DBMIAOO.js.map

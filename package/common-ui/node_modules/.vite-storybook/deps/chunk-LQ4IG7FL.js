import {
  require_a_constructor
} from "./chunk-EPWCMYLM.js";
import {
  require_object_create
} from "./chunk-SG7PAJ4O.js";
import {
  require_a_callable,
  require_an_object,
  require_array_slice,
  require_export,
  require_fails,
  require_function_apply,
  require_function_bind_native,
  require_function_uncurry_this,
  require_get_built_in,
  require_has_own_property,
  require_is_object
} from "./chunk-DGOB4M7K.js";
import {
  __commonJS
} from "./chunk-TFWDKVI3.js";

// ../../.yarn/unplugged/core-js-npm-3.29.1-baa30db121/node_modules/core-js/internals/function-bind.js
var require_function_bind = __commonJS({
  "../../.yarn/unplugged/core-js-npm-3.29.1-baa30db121/node_modules/core-js/internals/function-bind.js"(exports, module) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var isObject2 = require_is_object();
    var hasOwn = require_has_own_property();
    var arraySlice = require_array_slice();
    var NATIVE_BIND = require_function_bind_native();
    var $Function = Function;
    var concat = uncurryThis([].concat);
    var join = uncurryThis([].join);
    var factories = {};
    var construct2 = function(C, argsLength, args) {
      if (!hasOwn(factories, argsLength)) {
        for (var list = [], i = 0; i < argsLength; i++)
          list[i] = "a[" + i + "]";
        factories[argsLength] = $Function("C,a", "return new C(" + join(list, ",") + ")");
      }
      return factories[argsLength](C, args);
    };
    module.exports = NATIVE_BIND ? $Function.bind : function bind2(that) {
      var F = aCallable(this);
      var Prototype = F.prototype;
      var partArgs = arraySlice(arguments, 1);
      var boundFunction = function bound() {
        var args = concat(partArgs, arraySlice(arguments));
        return this instanceof boundFunction ? construct2(F, args.length, args) : F.apply(that, args);
      };
      if (isObject2(Prototype))
        boundFunction.prototype = Prototype;
      return boundFunction;
    };
  }
});

// ../../.yarn/unplugged/core-js-npm-3.29.1-baa30db121/node_modules/core-js/modules/es.reflect.construct.js
var $ = require_export();
var getBuiltIn = require_get_built_in();
var apply = require_function_apply();
var bind = require_function_bind();
var aConstructor = require_a_constructor();
var anObject = require_an_object();
var isObject = require_is_object();
var create = require_object_create();
var fails = require_fails();
var nativeConstruct = getBuiltIn("Reflect", "construct");
var ObjectPrototype = Object.prototype;
var push = [].push;
var NEW_TARGET_BUG = fails(function() {
  function F() {
  }
  return !(nativeConstruct(function() {
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function() {
  nativeConstruct(function() {
  });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;
$({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args) {
    aConstructor(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG)
      return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      var $args = [null];
      apply(push, $args, args);
      return new (apply(bind, Target, $args))();
    }
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : ObjectPrototype);
    var result = apply(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
//# sourceMappingURL=chunk-LQ4IG7FL.js.map

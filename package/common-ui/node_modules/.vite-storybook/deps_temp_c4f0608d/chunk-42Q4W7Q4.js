import {
  require_react
} from "./chunk-RJMQKCCQ.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// ../../.yarn/__virtual__/@mdx-js-react-virtual-73413bad81/0/cache/@mdx-js-react-npm-1.6.22-57e4c05c2b-bc84bd514b.zip/node_modules/@mdx-js/react/dist/esm.js
var import_react = __toESM(require_react());
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var isFunction = function isFunction2(obj) {
  return typeof obj === "function";
};
var MDXContext = import_react.default.createContext({});
var withMDXComponents = function withMDXComponents2(Component) {
  return function(props) {
    var allComponents = useMDXComponents(props.components);
    return import_react.default.createElement(Component, _extends({}, props, {
      components: allComponents
    }));
  };
};
var useMDXComponents = function useMDXComponents2(components) {
  var contextComponents = import_react.default.useContext(MDXContext);
  var allComponents = contextComponents;
  if (components) {
    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);
  }
  return allComponents;
};
var MDXProvider = function MDXProvider2(props) {
  var allComponents = useMDXComponents(props.components);
  return import_react.default.createElement(MDXContext.Provider, {
    value: allComponents
  }, props.children);
};
var TYPE_PROP_NAME = "mdxType";
var DEFAULTS = {
  inlineCode: "code",
  wrapper: function wrapper(_ref) {
    var children = _ref.children;
    return import_react.default.createElement(import_react.default.Fragment, {}, children);
  }
};
var MDXCreateElement = import_react.default.forwardRef(function(props, ref) {
  var propComponents = props.components, mdxType = props.mdxType, originalType = props.originalType, parentName = props.parentName, etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);
  var components = useMDXComponents(propComponents);
  var type = mdxType;
  var Component = components["".concat(parentName, ".").concat(type)] || components[type] || DEFAULTS[type] || originalType;
  if (propComponents) {
    return import_react.default.createElement(Component, _objectSpread2(_objectSpread2({
      ref
    }, etc), {}, {
      components: propComponents
    }));
  }
  return import_react.default.createElement(Component, _objectSpread2({
    ref
  }, etc));
});
MDXCreateElement.displayName = "MDXCreateElement";
function createElement(type, props) {
  var args = arguments;
  var mdxType = props && props.mdxType;
  if (typeof type === "string" || mdxType) {
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = MDXCreateElement;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key)) {
        newProps[key] = props[key];
      }
    }
    newProps.originalType = type;
    newProps[TYPE_PROP_NAME] = typeof type === "string" ? type : mdxType;
    createElementArgArray[1] = newProps;
    for (var i = 2; i < argsLength; i++) {
      createElementArgArray[i] = args[i];
    }
    return import_react.default.createElement.apply(null, createElementArgArray);
  }
  return import_react.default.createElement.apply(null, args);
}

export {
  MDXContext,
  withMDXComponents,
  useMDXComponents,
  MDXProvider,
  createElement
};
//# sourceMappingURL=chunk-42Q4W7Q4.js.map
